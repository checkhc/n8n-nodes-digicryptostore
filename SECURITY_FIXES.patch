--- a/nodes/PhotoCertif/PhotoCertif.node.ts
+++ b/nodes/PhotoCertif/PhotoCertif.node.ts
@@ -8,6 +8,24 @@ import {
 
 import axios from 'axios';
+import { URL } from 'url';
+
+// Security and Performance Constants
+const REQUEST_TIMEOUT = 30000;          // 30 seconds
+const DOWNLOAD_TIMEOUT = 120000;        // 2 minutes for file downloads
+const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB
+const MIN_POLLING_INTERVAL = 10;        // 10 seconds minimum
+
+// URL Validation - Prevents SSRF attacks
+function validateUrl(urlString: string): void {
+	const url = new URL(urlString);
+	if (!['http:', 'https:'].includes(url.protocol)) throw new Error(`Protocol ${url.protocol} not allowed`);
+	const hostname = url.hostname.toLowerCase();
+	const blocked = ['localhost', '127.0.0.1', '0.0.0.0', '::1', '169.254.169.254'];
+	if (blocked.includes(hostname)) throw new Error('Access to internal IPs not allowed');
+	if (/^(10\.|172\.(1[6-9]|2[0-9]|3[01])\.|192\.168\.)/.test(hostname)) {
+		throw new Error('Access to private IP ranges not allowed');
+	}
+}
 
 export class PhotoCertif implements INodeType {
 	description: INodeTypeDescription = {
@@ -489,9 +507,14 @@ export class PhotoCertif implements INodeType {
 					if (inputType === 'url') {
 						// Download file from URL and convert to base64
 						const fileUrl = this.getNodeParameter('fileUrl', i) as string;
+						
+						// SECURITY: Validate URL to prevent SSRF
+						validateUrl(fileUrl);
 
 						const fileResponse = await axios.get(fileUrl, {
+							timeout: DOWNLOAD_TIMEOUT,
 							responseType: 'arraybuffer',
+							maxContentLength: MAX_FILE_SIZE,
+							maxBodyLength: MAX_FILE_SIZE,
 							headers: {
 								'User-Agent': 'n8n-photocertif/1.0',
 							},
@@ -526,6 +549,7 @@ export class PhotoCertif implements INodeType {
 					const response = await axios.post(
 						`${baseUrl}${endpoint}/upload/iv_route`,
 						requestBody,
 						{
+							timeout: REQUEST_TIMEOUT,
 							headers: {
 								'Authorization': `Bearer ${apiKey}`,
 								'Content-Type': 'application/json',
@@ -545,6 +569,7 @@ export class PhotoCertif implements INodeType {
 					const response = await axios.get(
 						`${baseUrl}${endpoint}/status/iv_route?id=${storageId}`,
 						{
+							timeout: REQUEST_TIMEOUT,
 							headers: {
 								'Authorization': `Bearer ${apiKey}`,
 							},
@@ -578,6 +603,7 @@ export class PhotoCertif implements INodeType {
 					const response = await axios.post(
 						`${baseUrl}${endpoint}/certify/iv_route`,
 						{
 							id: storageId,
@@ -597,6 +623,7 @@ export class PhotoCertif implements INodeType {
 							youtube_url,
 						},
 						{
+							timeout: REQUEST_TIMEOUT,
 							headers: {
 								'Authorization': `Bearer ${apiKey}`,
 								'Content-Type': 'application/json',
@@ -615,7 +642,10 @@ export class PhotoCertif implements INodeType {
 				// ============================================
 				else if (operation === 'waitForCertification') {
 					const storageId = this.getNodeParameter('storageId', i) as string;
-					const pollingInterval = this.getNodeParameter('pollingInterval', i, 300) as number;
+					// SECURITY: Enforce minimum polling interval to prevent API spam
+					const pollingInterval = Math.max(
+						MIN_POLLING_INTERVAL,
+						this.getNodeParameter('pollingInterval', i, 300) as number
+					);
 					const maxWaitTime = this.getNodeParameter('maxWaitTime', i, 86400) as number;
 
 					const startTime = Date.now();
@@ -630,6 +660,7 @@ export class PhotoCertif implements INodeType {
 						const statusResponse = await axios.get(
 							`${baseUrl}${endpoint}/status/iv_route?id=${storageId}`,
 							{
+								timeout: REQUEST_TIMEOUT,
 								headers: {
 									'Authorization': `Bearer ${apiKey}`,
 								},
@@ -675,6 +706,7 @@ export class PhotoCertif implements INodeType {
 					const response = await axios.get(
 						`${baseUrl}${endpoint}/download/iv_route?id=${storageId}`,
 						{
+							timeout: REQUEST_TIMEOUT,
 							headers: {
 								'Authorization': `Bearer ${apiKey}`,
 							},
@@ -691,6 +723,7 @@ export class PhotoCertif implements INodeType {
 					const response = await axios.get(
 						`${baseUrl}/api/pricing/service?type=${resourceType}`,
 						{
+							timeout: REQUEST_TIMEOUT,
 							headers: {
 								'Authorization': `Bearer ${apiKey}`,
 							},
@@ -719,9 +752,10 @@ export class PhotoCertif implements INodeType {
 				if (this.continueOnFail()) {
 					returnData.push({
 						json: {
-							error: error.message || 'Unknown error',
+							error: 'Request failed',
 							status_code: error.response?.status,
-							details: error.response?.data,
+							// SECURITY: Do not expose full response data (may contain sensitive info)
+							message: error.response?.data?.error || error.message || 'Unknown error',
 						},
 						pairedItem: { item: i },
 					});
