{
  "name": "PhotoCertif by CHECKHC - Docs Certification v2.2.0 (+ CHECKHC Balance Check + storageId fix)",
  "nodes": [
    {
      "parameters": {
        "content": "## \ud83d\udcdc PhotoCertif by CHECKHC - Document Certification v2.2.0\n\n\ud83c\udf10 **Learn more:** https://www.checkhc.net\n\ud83d\udce7 **Contact:** contact@checkhc.net\n\n### \ud83c\udfaf What this workflow does:\n1. **Input Data** - Configure document and metadata\n2. **Get Complete Pricing** - Fetch all costs (SOL needed, CHECKHC amount, fees, affiliate split)\n3. **Check SOL Balance** - Verify SOL balance\n4. **SOL Sufficient?** - Verify sufficient SOL for swap + fees\n5. **Upload Document** - Upload PDF/DOCX to PhotoCertif\n5a. **Check CHECKHC Balance** - \ud83c\udd95 Verify existing CHECKHC tokens AFTER upload\n5b. **CHECKHC Sufficient?** - \ud83c\udd95 Skip swap if already have enough CHECKHC\n6. **Swap SOL \u2192 CHECKHC** - Auto-swap (only if CHECKHC insufficient)\n7. **Transfer to Main Wallet** - Send CHECKHC to payment wallet\n8. **Has Affiliate?** - Check if affiliate payment needed\n9a. **Transfer to Affiliate** - Send CHECKHC to affiliate (if applicable)\n10. **Wait Confirmation** - Wait for blockchain confirmation\n11. **Certify Document** - Launch certification process\n12. **Poll Status** - Wait until certification complete\n13. **Success** - Return NFT mint address\n\n### \ud83d\udccb Prerequisites:\n\u2705 PhotoCertif API credential configured\n\u2705 Solana API credential with private key\n\u2705 Sufficient SOL for swap + fees OR existing CHECKHC tokens\n\n### \ud83c\udd95 NOUVEAUT\u00c9S v2.1.0:\n- \u2705 Upload TOUJOURS ex\u00e9cut\u00e9 (n\u00e9cessaire pour storageId)\n- \u2705 V\u00e9rification balance CHECKHC APR\u00c8S upload\n- \u2705 Skip swap automatique si CHECKHC d\u00e9j\u00e0 suffisant\n- \u2705 \u00c9conomie de frais et temps si tokens d\u00e9j\u00e0 pr\u00e9sents\n- \u2705 Toutes corrections v2.0.1 incluses (.first() partout)\n\n### \u26a0\ufe0f CHANGEMENTS MAJEURS v2.0.0:\n- \u2705 V\u00e9rification balance SOL compl\u00e8te\n- \u2705 Montant swap SOL correct (via API pricing)\n- \u2705 Split paiement affili\u00e9 automatique\n- \u2705 Calcul frais Irys en temps r\u00e9el\n- \u2705 Gestion d'erreur entre chaque \u00e9tape\n- \u2705 Quote Jupiter en temps r\u00e9el\n\n### \ud83d\udd27 Configuration:\n- Edit **Input Data** node with your values\n- Assign credentials to all nodes\n- Click **Execute Workflow** to test\n\n---\n**Developed by CHECKHC** | https://www.checkhc.net",
        "height": 620,
        "width": 480
      },
      "id": "sticky-doc",
      "name": "Documentation v2.2.0",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        240,
        240
      ]
    },
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        240,
        820
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fileUrl",
              "name": "fileUrl",
              "value": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf",
              "type": "string"
            },
            {
              "id": "title",
              "name": "title",
              "value": "Test Document 2025",
              "type": "string"
            },
            {
              "id": "description",
              "name": "description",
              "value": "Automated certification via n8n workflow v2.1.0",
              "type": "string"
            },
            {
              "id": "cert_name",
              "name": "cert_name",
              "value": "TestDoc2025",
              "type": "string"
            },
            {
              "id": "cert_symbol",
              "name": "cert_symbol",
              "value": "DOC25",
              "type": "string"
            },
            {
              "id": "cert_description",
              "name": "cert_description",
              "value": "Official document certified on Solana blockchain",
              "type": "string"
            },
            {
              "id": "cert_prop",
              "name": "cert_prop",
              "value": "Your Name/Company",
              "type": "string"
            },
            {
              "id": "fileSize",
              "name": "fileSize",
              "value": 500000,
              "type": "number"
            },
            {
              "id": "originalSize",
              "name": "originalSize",
              "value": 2000000,
              "type": "number"
            }
          ]
        }
      },
      "id": "input-data",
      "name": "1. Input Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        460,
        820
      ]
    },
    {
      "parameters": {
        "operation": "getPricing",
        "resourceType": "docs",
        "fileSize": "={{ $('1. Input Data').first().json.fileSize }}",
        "originalSize": "={{ $('1. Input Data').first().json.originalSize }}"
      },
      "id": "get-complete-pricing",
      "name": "2. Get Complete Pricing",
      "type": "n8n-nodes-photocertif.photoCertif",
      "typeVersion": 1,
      "position": [
        680,
        820
      ],
      "credentials": {
        "photoCertifApi": {
          "id": "photocertif_api",
          "name": "PhotoCertif API"
        }
      },
      "continueOnFail": false,
      "onError": "stopWorkflow"
    },
    {
      "parameters": {
        "operation": "getBalance",
        "walletAddress": ""
      },
      "id": "check-sol-balance",
      "name": "3. Check SOL Balance",
      "type": "n8n-nodes-solana-swap.solanaNode",
      "typeVersion": 1,
      "position": [
        900,
        820
      ],
      "credentials": {
        "solanaApi": {
          "id": "solana_api",
          "name": "Solana API"
        }
      },
      "continueOnFail": false,
      "onError": "stopWorkflow"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $('3. Check SOL Balance').first().json.balance }}",
              "operation": "largerEqual",
              "value2": "={{ $('2. Get Complete Pricing').first().json.total_sol_needed }}"
            }
          ]
        }
      },
      "id": "if-sol-sufficient",
      "name": "4. SOL Balance Sufficient?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1120,
        820
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "error",
              "name": "error",
              "value": "Insufficient SOL balance",
              "type": "string"
            },
            {
              "id": "required_sol",
              "name": "required_sol",
              "value": "={{ $('2. Get Complete Pricing').first().json.total_sol_needed }}",
              "type": "number"
            },
            {
              "id": "current_sol",
              "name": "current_sol",
              "value": "={{ $('3. Check SOL Balance').first().json.balance }}",
              "type": "number"
            },
            {
              "id": "message",
              "name": "message",
              "value": "=Please add {{ $json.required_sol - $json.current_sol }} SOL to your wallet",
              "type": "string"
            }
          ]
        }
      },
      "id": "error-insufficient-sol",
      "name": "ERROR: Insufficient SOL",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1340,
        940
      ]
    },
    {
      "parameters": {
        "operation": "upload",
        "resourceType": "docs",
        "inputType": "url",
        "fileUrl": "={{ $('1. Input Data').first().json.fileUrl }}",
        "title": "={{ $('1. Input Data').first().json.title }}",
        "description": "={{ $('1. Input Data').first().json.description }}"
      },
      "id": "upload-document",
      "name": "5. Upload Document",
      "type": "n8n-nodes-photocertif.photoCertif",
      "typeVersion": 1,
      "position": [
        1340,
        700
      ],
      "credentials": {
        "photoCertifApi": {
          "id": "photocertif_api",
          "name": "PhotoCertif API"
        }
      },
      "continueOnFail": false,
      "onError": "stopWorkflow"
    },
    {
      "parameters": {
        "operation": "getTokenBalance",
        "walletAddress": "",
        "tokenMint": "={{ $('2. Get Complete Pricing').first().json.checkhc_mint }}"
      },
      "id": "check-checkhc-after-upload",
      "name": "5a. Check CHECKHC Balance",
      "type": "n8n-nodes-solana-swap.solanaNode",
      "typeVersion": 1,
      "position": [
        1800,
        700
      ],
      "credentials": {
        "solanaApi": {
          "id": "solana_api",
          "name": "Solana API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $('5a. Check CHECKHC Balance').first().json.balance }}",
              "operation": "largerEqual",
              "value2": "={{ $('2. Get Complete Pricing').first().json.price_checkhc }}"
            }
          ]
        }
      },
      "id": "if-checkhc-sufficient-after-upload",
      "name": "5b. CHECKHC Sufficient?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2020,
        700
      ]
    },
    {
      "parameters": {
        "operation": "executeSwapAdvanced",
        "inputMint": "So11111111111111111111111111111111111111112",
        "outputMint": "={{ $('2. Get Complete Pricing').first().json.checkhc_mint }}",
        "swapAmount": "={{ $('2. Get Complete Pricing').first().json.sol_for_service }}",
        "slippageBps": 100,
        "priorityFee": 5000,
        "dexProvider": "jupiter"
      },
      "id": "swap-sol-to-checkhc",
      "name": "6. Swap SOL \u2192 CHECKHC",
      "type": "n8n-nodes-solana-swap.solanaNode",
      "typeVersion": 1,
      "position": [
        1560,
        700
      ],
      "credentials": {
        "solanaApi": {
          "id": "solana_api",
          "name": "Solana API"
        }
      },
      "continueOnFail": false,
      "onError": "stopWorkflow"
    },
    {
      "parameters": {
        "operation": "sendToken",
        "recipientAddress": "={{ $('2. Get Complete Pricing').first().json.payment_split.main_wallet }}",
        "tokenType": "CUSTOM",
        "customTokenMint": "={{ $('2. Get Complete Pricing').first().json.checkhc_mint }}",
        "sendAmount": "={{ $('2. Get Complete Pricing').first().json.payment_split.main_checkhc }}",
        "sendPriorityFee": 5000
      },
      "id": "transfer-main-payment",
      "name": "7. Transfer to Main Wallet",
      "type": "n8n-nodes-solana-swap.solanaNode",
      "typeVersion": 1,
      "position": [
        1780,
        700
      ],
      "credentials": {
        "solanaApi": {
          "id": "solana_api",
          "name": "Solana API"
        }
      },
      "continueOnFail": false,
      "onError": "stopWorkflow"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $('2. Get Complete Pricing').first().json.payment_split.affiliate_checkhc }}",
              "operation": "larger",
              "value2": 0
            }
          ]
        }
      },
      "id": "if-has-affiliate",
      "name": "8. Has Affiliate?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2000,
        700
      ]
    },
    {
      "parameters": {
        "operation": "sendToken",
        "recipientAddress": "={{ $('2. Get Complete Pricing').first().json.payment_split.affiliate_wallet }}",
        "tokenType": "CUSTOM",
        "customTokenMint": "={{ $('2. Get Complete Pricing').first().json.checkhc_mint }}",
        "sendAmount": "={{ $('2. Get Complete Pricing').first().json.payment_split.affiliate_checkhc }}",
        "sendPriorityFee": 5000
      },
      "id": "transfer-affiliate-payment",
      "name": "9a. Transfer to Affiliate",
      "type": "n8n-nodes-solana-swap.solanaNode",
      "typeVersion": 1,
      "position": [
        2220,
        580
      ],
      "credentials": {
        "solanaApi": {
          "id": "solana_api",
          "name": "Solana API"
        }
      },
      "continueOnFail": false,
      "onError": "stopWorkflow"
    },
    {
      "parameters": {
        "amount": 10,
        "unit": "seconds"
      },
      "id": "wait-blockchain",
      "name": "10. Wait Blockchain Confirmation",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2440,
        700
      ],
      "webhookId": "blockchain-wait-v2"
    },
    {
      "parameters": {
        "operation": "certify",
        "resourceType": "docs",
        "storageId": "={{ $('5. Upload Document').first().json.data.iv_storageid }}",
        "name": "={{ $('1. Input Data').first().json.cert_name }}",
        "cert_symbol": "={{ $('1. Input Data').first().json.cert_symbol }}",
        "cert_description": "={{ $('1. Input Data').first().json.cert_description }}",
        "cert_prop": "={{ $('1. Input Data').first().json.cert_prop }}"
      },
      "id": "certify-document",
      "name": "11. Certify Document",
      "type": "n8n-nodes-photocertif.photoCertif",
      "typeVersion": 1,
      "position": [
        2660,
        700
      ],
      "credentials": {
        "photoCertifApi": {
          "id": "photocertif_api",
          "name": "PhotoCertif API"
        }
      },
      "continueOnFail": false,
      "onError": "stopWorkflow"
    },
    {
      "parameters": {
        "operation": "waitForCertification",
        "resourceType": "docs",
        "storageId": "={{ $('5. Upload Document').first().json.data.iv_storageid }}",
        "pollingInterval": 60,
        "maxWaitTime": 1800
      },
      "id": "wait-certification",
      "name": "12. Wait For Certification",
      "type": "n8n-nodes-photocertif.photoCertif",
      "typeVersion": 1,
      "position": [
        2880,
        700
      ],
      "credentials": {
        "photoCertifApi": {
          "id": "photocertif_api",
          "name": "PhotoCertif API"
        }
      },
      "continueOnFail": false,
      "onError": "stopWorkflow"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success",
              "name": "success",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "message",
              "name": "message",
              "value": "Document certified successfully with affiliate split!",
              "type": "string"
            },
            {
              "id": "storageId",
              "name": "storageId",
              "value": "={{ $('5. Upload Document').first().json.data.iv_storageid }}",
              "type": "string"
            },
            {
              "id": "nft_mint",
              "name": "nft_mint_address",
              "value": "={{ $('12. Wait For Certification').first().json.nft_mint }}",
              "type": "string"
            },
            {
              "id": "pricing_details",
              "name": "pricing_details",
              "value": "={{ $('2. Get Complete Pricing').first().json }}",
              "type": "object"
            },
            {
              "id": "swap_signature",
              "name": "swap_signature",
              "value": "={{ $('6. Swap SOL \u2192 CHECKHC').first().json.signature }}",
              "type": "string"
            },
            {
              "id": "main_payment_signature",
              "name": "main_payment_signature",
              "value": "={{ $('7. Transfer to Main Wallet').first().json.signature }}",
              "type": "string"
            },
            {
              "id": "affiliate_payment_signature",
              "name": "affiliate_payment_signature",
              "value": "={{ $('9a. Transfer to Affiliate').first().json.signature || null }}",
              "type": "string"
            }
          ]
        }
      },
      "id": "success-output",
      "name": "13. Success Output",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3100,
        700
      ]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "1. Input Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1. Input Data": {
      "main": [
        [
          {
            "node": "2. Get Complete Pricing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2. Get Complete Pricing": {
      "main": [
        [
          {
            "node": "3. Check SOL Balance",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3. Check SOL Balance": {
      "main": [
        [
          {
            "node": "4. SOL Balance Sufficient?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4. SOL Balance Sufficient?": {
      "main": [
        [
          {
            "node": "5. Upload Document",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ERROR: Insufficient SOL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5. Upload Document": {
      "main": [
        [
          {
            "node": "5a. Check CHECKHC Balance",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6. Swap SOL \u2192 CHECKHC": {
      "main": [
        [
          {
            "node": "7. Transfer to Main Wallet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "7. Transfer to Main Wallet": {
      "main": [
        [
          {
            "node": "8. Has Affiliate?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "8. Has Affiliate?": {
      "main": [
        [
          {
            "node": "9a. Transfer to Affiliate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "10. Wait Blockchain Confirmation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "9a. Transfer to Affiliate": {
      "main": [
        [
          {
            "node": "10. Wait Blockchain Confirmation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "10. Wait Blockchain Confirmation": {
      "main": [
        [
          {
            "node": "11. Certify Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "11. Certify Document": {
      "main": [
        [
          {
            "node": "12. Wait For Certification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "12. Wait For Certification": {
      "main": [
        [
          {
            "node": "13. Success Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5a. Check CHECKHC Balance": {
      "main": [
        [
          {
            "node": "5b. CHECKHC Sufficient?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5b. CHECKHC Sufficient?": {
      "main": [
        [
          {
            "node": "7. Transfer to Main Wallet",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "6. Swap SOL \u2192 CHECKHC",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "errorWorkflow": {
      "continueOnFail": false
    }
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-10-11T18:50:00.000Z",
      "updatedAt": "2025-10-11T18:50:00.000Z",
      "id": "1",
      "name": "PhotoCertif"
    },
    {
      "createdAt": "2025-10-11T18:50:00.000Z",
      "updatedAt": "2025-10-11T18:50:00.000Z",
      "id": "2",
      "name": "v2.1.0"
    },
    {
      "createdAt": "2025-10-11T18:50:00.000Z",
      "updatedAt": "2025-10-11T18:50:00.000Z",
      "id": "3",
      "name": "Corrected"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-10-11T18:50:00.000Z",
  "versionId": "2.1.0",
  "id": "photocertif-docs-v2-1-0",
  "meta": {
    "instanceId": "photocertif-docs-certification-v2.1.0"
  }
}