{
  "name": "PhotoCertif B2B - Complete Server-Side Automation ✅",
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "When clicking 'Test workflow'",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 500]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "file",
              "name": "fileUrl",
              "value": "https://drive.google.com/uc?id=YOUR_FILE_ID&export=download",
              "type": "string"
            },
            {
              "id": "title",
              "name": "title",
              "value": "B2B Automated Contract 2025",
              "type": "string"
            },
            {
              "id": "desc",
              "name": "description",
              "value": "Complete server-side automation with Irys + NFT",
              "type": "string"
            },
            {
              "id": "name",
              "name": "cert_name",
              "value": "AutoContract2025",
              "type": "string"
            },
            {
              "id": "symbol",
              "name": "cert_symbol",
              "value": "AUTO",
              "type": "string"
            },
            {
              "id": "certdesc",
              "name": "cert_description",
              "value": "B2B automated certification with full server-side processing",
              "type": "string"
            },
            {
              "id": "owner",
              "name": "cert_owner",
              "value": "B2B Client Corp",
              "type": "string"
            },
            {
              "id": "collection",
              "name": "collection_mint",
              "value": "BMCVo8ehcpR2E92d2RUqyybQ7fMeDUWpMxNbaAsQqV8i",
              "type": "string"
            },
            {
              "id": "extension",
              "name": "file_extension",
              "value": "pdf",
              "type": "string"
            }
          ]
        }
      },
      "id": "input-data",
      "name": "Input Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [460, 500]
    },
    {
      "parameters": {
        "resourceType": "docs",
        "operation": "getPricing"
      },
      "id": "get-pricing",
      "name": "1. Get Pricing",
      "type": "n8n-nodes-photocertif.photoCertif",
      "typeVersion": 1,
      "position": [680, 500],
      "credentials": {
        "photoCertifApi": {
          "id": "1",
          "name": "PhotoCertif API"
        }
      }
    },
    {
      "parameters": {
        "resourceType": "docs",
        "operation": "upload",
        "inputType": "url",
        "fileUrl": "={{ $('Input Data').item.json.fileUrl }}",
        "title": "={{ $('Input Data').item.json.title }}",
        "description": "={{ $('Input Data').item.json.description }}",
        "fileExtension": "={{ $('Input Data').item.json.file_extension }}"
      },
      "id": "upload",
      "name": "2. Upload Document",
      "type": "n8n-nodes-photocertif.photoCertif",
      "typeVersion": 1,
      "position": [900, 500],
      "credentials": {
        "photoCertifApi": {
          "id": "1",
          "name": "PhotoCertif API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ============================================\n// AUTO-SWAP SOL → CHECKHC + PAYMENT\n// ============================================\n\nconst { Connection, Keypair, PublicKey, VersionedTransaction, Transaction } = require('@solana/web3.js');\nconst { getAssociatedTokenAddress, createTransferInstruction, getAccount } = require('@solana/spl-token');\nconst bs58 = require('bs58');\nconst fetch = require('node-fetch');\n\nconst pricingData = $('1. Get Pricing').first().json;\nconst uploadData = $('2. Upload Document').first().json;\n\nconst RPC_URL = 'https://api.mainnet-beta.solana.com';\nconst JUPITER_API = 'https://quote-api.jup.ag/v6';\nconst SOL_MINT = 'So11111111111111111111111111111111111111112';\nconst CHECKHC_MINT = pricingData.checkhc_mint;\nconst PAYMENT_WALLET = new PublicKey(pricingData.payment_wallet);\nconst AMOUNT_CHECKHC_NEEDED = pricingData.price_checkhc;\nconst SLIPPAGE_BPS = 100;\n\nconst credentials = await this.getCredentials('solanaWallet');\nconst privateKeyBase58 = credentials.privateKey;\nconst payerKeypair = Keypair.fromSecretKey(bs58.decode(privateKeyBase58));\n\nconsole.log('\\n🚀 SWAP + PAYMENT');\nconst connection = new Connection(RPC_URL, 'confirmed');\n\nconst checkhcMint = new PublicKey(CHECKHC_MINT);\nconst checkhcTokenAccount = await getAssociatedTokenAddress(checkhcMint, payerKeypair.publicKey);\n\nlet currentCHECKHCBalance = 0;\ntry {\n  const accountInfo = await getAccount(connection, checkhcTokenAccount);\n  currentCHECKHCBalance = Number(accountInfo.amount) / 1000000;\n  console.log('Current CHECKHC:', currentCHECKHCBalance);\n} catch (error) {\n  console.log('No CHECKHC account yet');\n}\n\nconst checkhcDeficit = Math.max(0, AMOUNT_CHECKHC_NEEDED - currentCHECKHCBalance);\n\nlet swapSignature = null;\nlet solSpent = 0;\nlet checkhcReceived = 0;\n\nif (checkhcDeficit > 0) {\n  console.log('🔄 Swapping', checkhcDeficit, 'CHECKHC');\n  \n  const outputAmountRaw = Math.ceil(checkhcDeficit * 1000000);\n  const quoteUrl = `${JUPITER_API}/quote?inputMint=${SOL_MINT}&outputMint=${CHECKHC_MINT}&amount=${outputAmountRaw}&slippageBps=${SLIPPAGE_BPS}&swapMode=ExactOut`;\n  \n  const quoteResponse = await fetch(quoteUrl);\n  if (!quoteResponse.ok) throw new Error('Jupiter quote failed');\n  \n  const quoteData = await quoteResponse.json();\n  const solNeeded = Number(quoteData.inAmount) / 1000000000;\n  \n  console.log('SOL needed:', solNeeded);\n  \n  const solBalance = await connection.getBalance(payerKeypair.publicKey);\n  if (solBalance / 1000000000 < solNeeded + 0.01) {\n    throw new Error(`Insufficient SOL. Need ${solNeeded + 0.01}`);\n  }\n  \n  const swapResponse = await fetch(`${JUPITER_API}/swap`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      quoteResponse: quoteData,\n      userPublicKey: payerKeypair.publicKey.toString(),\n      wrapAndUnwrapSol: true,\n      dynamicComputeUnitLimit: true,\n      prioritizationFeeLamports: 'auto'\n    })\n  });\n  \n  if (!swapResponse.ok) throw new Error('Swap transaction failed');\n  \n  const swapData = await swapResponse.json();\n  const swapTransactionBuf = Buffer.from(swapData.swapTransaction, 'base64');\n  let transaction = VersionedTransaction.deserialize(swapTransactionBuf);\n  transaction.sign([payerKeypair]);\n  \n  swapSignature = await connection.sendRawTransaction(transaction.serialize(), {\n    skipPreflight: false,\n    maxRetries: 3\n  });\n  \n  const latestBlockhash = await connection.getLatestBlockhash('confirmed');\n  await connection.confirmTransaction({\n    signature: swapSignature,\n    blockhash: latestBlockhash.blockhash,\n    lastValidBlockHeight: latestBlockhash.lastValidBlockHeight\n  }, 'confirmed');\n  \n  const newAccountInfo = await getAccount(connection, checkhcTokenAccount);\n  const newBalance = Number(newAccountInfo.amount) / 1000000;\n  \n  solSpent = solNeeded;\n  checkhcReceived = newBalance - currentCHECKHCBalance;\n  currentCHECKHCBalance = newBalance;\n  \n  console.log('✅ Swap complete. New balance:', currentCHECKHCBalance);\n} else {\n  console.log('✅ Sufficient CHECKHC');\n}\n\n// Payment\nconsole.log('💳 Paying certification...');\n\nconst paymentTokenAccount = await getAssociatedTokenAddress(checkhcMint, PAYMENT_WALLET);\nconst amountRaw = Math.floor(AMOUNT_CHECKHC_NEEDED * 1000000);\nconst transferIx = createTransferInstruction(\n  checkhcTokenAccount,\n  paymentTokenAccount,\n  payerKeypair.publicKey,\n  amountRaw\n);\n\nconst { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash('confirmed');\nconst paymentTx = new Transaction();\npaymentTx.recentBlockhash = blockhash;\npaymentTx.feePayer = payerKeypair.publicKey;\npaymentTx.add(transferIx);\npaymentTx.sign(payerKeypair);\n\nconst paymentSignature = await connection.sendRawTransaction(\n  paymentTx.serialize(),\n  { skipPreflight: false, preflightCommitment: 'confirmed' }\n);\n\nawait connection.confirmTransaction({\n  signature: paymentSignature,\n  blockhash,\n  lastValidBlockHeight\n}, 'confirmed');\n\nconsole.log('✅ Payment confirmed!\\n');\n\nreturn {\n  swap_executed: checkhcDeficit > 0,\n  swap_signature: swapSignature,\n  sol_spent: solSpent,\n  checkhc_received: checkhcReceived,\n  payment_signature: paymentSignature,\n  payment_amount: AMOUNT_CHECKHC_NEEDED,\n  payer_wallet: payerKeypair.publicKey.toString(),\n  storage_id: uploadData.storage_id\n};"
      },
      "id": "swap-pay",
      "name": "3. Swap + Pay",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 500]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('1. Get Pricing').item.json.base_url || 'https://localhost' }}/api/storage/docs/b2b-certify-step1",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "photoCertifApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"storage_id\": \"{{ $('2. Upload Document').item.json.storage_id }}\",\n  \"user_private_key\": \"{{ $credentials.solanaWallet.privateKey }}\",\n  \"cert_data\": {\n    \"name\": \"{{ $('Input Data').item.json.cert_name }}\",\n    \"cert_symbol\": \"{{ $('Input Data').item.json.cert_symbol }}\",\n    \"cert_description\": \"{{ $('Input Data').item.json.cert_description }}\",\n    \"cert_prop\": \"{{ $('Input Data').item.json.cert_owner }}\"\n  }\n}",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "step1",
      "name": "4. Step 1: Certify + Irys Upload (Server)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 500],
      "credentials": {
        "photoCertifApi": {
          "id": "1",
          "name": "PhotoCertif API"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('1. Get Pricing').item.json.base_url || 'https://localhost' }}/api/storage/docs/b2b-certify-step2",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "photoCertifApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"storage_id\": \"{{ $('2. Upload Document').item.json.storage_id }}\",\n  \"user_private_key\": \"{{ $credentials.solanaWallet.privateKey }}\",\n  \"metadata\": {{ JSON.stringify($('4. Step 1: Certify + Irys Upload (Server)').item.json.metadata_for_nft) }},\n  \"collection_mint\": \"{{ $('Input Data').item.json.collection_mint }}\"\n}",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "step2",
      "name": "5. Step 2: Mint NFT (Server)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1560, 500],
      "credentials": {
        "photoCertifApi": {
          "id": "1",
          "name": "PhotoCertif API"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('1. Get Pricing').item.json.base_url || 'https://localhost' }}/api/storage/docs/b2b-certify-step3",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "photoCertifApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"storage_id\": \"{{ $('2. Upload Document').item.json.storage_id }}\",\n  \"nft_mint_address\": \"{{ $('5. Step 2: Mint NFT (Server)').item.json.nft_data.mint_address }}\",\n  \"mint_transaction_signature\": \"{{ $('5. Step 2: Mint NFT (Server)').item.json.nft_data.transaction_signature }}\",\n  \"owner_wallet\": \"{{ $('5. Step 2: Mint NFT (Server)').item.json.nft_data.owner_wallet }}\"\n}",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "step3",
      "name": "6. Step 3: Finalize (Server)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1780, 500],
      "credentials": {
        "photoCertifApi": {
          "id": "1",
          "name": "PhotoCertif API"
        }
      }
    },
    {
      "parameters": {
        "content": "=## 🎉 100% SERVER-SIDE AUTOMATION\n\n**TRUE B2B automation - Everything server-side!**\n\n---\n\n## 📋 Workflow Steps\n\n✅ **1. Get Pricing** - Server API\n✅ **2. Upload Document** - Server stores file  \n✅ **3. Swap + Pay** - n8n (user wallet)\n✅ **4. Step 1: Certify + Irys** - Server (with user wallet)\n   - Calls /certify/iv_route\n   - Uploads to Irys: original, certified, metadata\n   - Updates database\n✅ **5. Step 2: Mint NFT** - Server (with user wallet)\n   - Creates Umi instance\n   - Mints NFT with Metaplex\n✅ **6. Step 3: Finalize** - Server\n   - Creates iv_certificates record\n   - Marks COMPLETED\n\n---\n\n## 💰 Payment\n{{ $('3. Swap + Pay').item.json.swap_executed ? '**Swap:** ✅ ' + $('3. Swap + Pay').item.json.sol_spent + ' SOL → ' + $('3. Swap + Pay').item.json.checkhc_received + ' CHECKHC' : '**Swap:** ⏭️ Skipped (sufficient balance)' }}\n**Payment:** {{ $('3. Swap + Pay').item.json.payment_amount }} CHECKHC\n**TX:** {{ $('3. Swap + Pay').item.json.payment_signature }}\n\n---\n\n## 🌐 Irys Upload (Step 1)\n**Image:** {{ $('4. Step 1: Certify + Irys Upload (Server)').item.json.irys_urls.certified_image }}\n**Original:** {{ $('4. Step 1: Certify + Irys Upload (Server)').item.json.irys_urls.original_document }}\n**Metadata:** {{ $('4. Step 1: Certify + Irys Upload (Server)').item.json.irys_urls.metadata }}\n\n---\n\n## 🎨 NFT Minted (Step 2)\n**Mint:** {{ $('5. Step 2: Mint NFT (Server)').item.json.nft_data.mint_address }}\n**Owner:** {{ $('5. Step 2: Mint NFT (Server)').item.json.nft_data.owner_wallet }}\n**TX:** {{ $('5. Step 2: Mint NFT (Server)').item.json.nft_data.transaction_signature }}\n\n**Solscan:** {{ $('5. Step 2: Mint NFT (Server)').item.json.explorer_links.nft }}\n\n---\n\n## ✅ FINALIZED (Step 3)\n**Status:** {{ $('6. Step 3: Finalize (Server)').item.json.certification_data.status }}\n**Certificate ID:** {{ $('6. Step 3: Finalize (Server)').item.json.certificate_id }}\n**Storage ID:** {{ $('6. Step 3: Finalize (Server)').item.json.storage_id }}\n\n---\n\n## 🎯 Key Features\n- ✅ **100% Automated** - Zero manual intervention\n- ✅ **Server-side processing** - Irys + NFT mint on server\n- ✅ **Billing ready** - iv_certificates created\n- ✅ **Same as web** - Exact same flow & fields\n- ✅ **Secure** - Private key only in request scope\n\n**Total Time:** ~60-90 seconds  \n**User Provides:** SOL only 🚀",
        "height": 900,
        "width": 600,
        "color": 4
      },
      "id": "results",
      "name": "Results - 100% Automation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [2020, 200]
    },
    {
      "parameters": {
        "content": "## ⚡ TRUE SERVER-SIDE AUTOMATION\n\n### 🎯 What This Workflow Does\n\nThis workflow implements **TRUE 100% automation** by doing **EXACTLY** what the web interface does, but entirely server-side.\n\n### 📊 Architecture\n\n**Step 1: Certify + Irys Upload (Server)**\n- Calls `/api/storage/docs/certify/iv_route` (same as web)\n- Uploads to Irys with user wallet:\n  - Original document\n  - Certified image\n  - Metadata JSON\n- Updates database with Irys URLs\n- Status: UPLOADED → READY_FOR_MINT\n\n**Step 2: Mint NFT (Server)**\n- Creates Umi instance with user wallet\n- Mints NFT using Metaplex (same as web)\n- Returns NFT mint address + signature\n- Status: READY_FOR_MINT → NFT_MINTED\n\n**Step 3: Finalize (Server)**\n- Creates `iv_certificates` record (CRITICAL for billing!)\n- All fields populated exactly like web\n- Status: NFT_MINTED → COMPLETED\n\n### 🔐 Security Model\n\n**User wallet stays in n8n:**\n- Private key passed ONLY for request duration\n- Cleared from server memory immediately\n- Never stored in database\n- Each request isolated\n\n**Server does heavy lifting:**\n- File processing\n- Irys SDK operations (with user signature)\n- Metaplex NFT minting (with user signature)\n- Database updates\n\n### ✅ Billing Compliance\n\n**ALL fields populated:**\n- ✅ `iv_storage`: status, irys URLs, transaction IDs\n- ✅ `iv_certificates`: nft_mint, transaction_id, cert data\n- ✅ Same data structure as web flow\n- ✅ Facturation/billing works correctly\n\n### 🚀 User Experience\n\n**User provides:** SOL only  \n**Workflow handles:**\n- SOL → CHECKHC swap (if needed)\n- Payment\n- Irys upload (server signs with user wallet)\n- NFT mint (server signs with user wallet)\n- Complete certification\n\n**Result:** Fully certified NFT in ~60-90 seconds!",
        "height": 900,
        "width": 500,
        "color": 5
      },
      "id": "info",
      "name": "Architecture Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [240, 800]
    }
  ],
  "connections": {
    "When clicking 'Test workflow'": {
      "main": [[
        {
          "node": "Input Data",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "Input Data": {
      "main": [[
        {
          "node": "1. Get Pricing",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "1. Get Pricing": {
      "main": [[
        {
          "node": "2. Upload Document",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "2. Upload Document": {
      "main": [[
        {
          "node": "3. Swap + Pay",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "3. Swap + Pay": {
      "main": [[
        {
          "node": "4. Step 1: Certify + Irys Upload (Server)",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "4. Step 1: Certify + Irys Upload (Server)": {
      "main": [[
        {
          "node": "5. Step 2: Mint NFT (Server)",
          "type": "main",
          "index": 0
        }
      ]]
    },
    "5. Step 2: Mint NFT (Server)": {
      "main": [[
        {
          "node": "6. Step 3: Finalize (Server)",
          "type": "main",
          "index": 0
        }
      ]]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "id": "photocertif-b2b-complete-final",
  "meta": {
    "instanceId": "photocertif-b2b-complete-final"
  },
  "tags": []
}
